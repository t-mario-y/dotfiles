% jq

$ yaml_file: fd --hidden ".*\.y[a]ml$" .

# YAML to JSON
yq e <yaml_file> --output-format json | jq

$ log_file: fd --no-ignore ".*\.log$" .

# show JSON string logs to JSON
tail --lines=100 --follow <log_file> | jq -R 'fromjson?'

% Node.js
# node -e instead of jq
echo '{"name": "Mario"}' | node -e 'console.log(JSON.parse(fs.readFileSync("/dev/stdin", "utf-8")).name);'

% docker

# list containers in JSON format
docker container ls -a --format '{"id":"{{ .ID }}", "image": "{{ .Image }}", "name": "{{ .Names }}", "ports": "{{ .Ports }}", "status": "{{ .Status }}" }' | jq

# list images in JSON format
docker images --format '{"id": "{{ .ID }}", "repo": "{{ .Repository }}", "tag": "{{ .Tag }}", "created_at": "{{ .CreatedAt }}", "size": "{{ .Size }}"}' | jq

# run and attach with bash
RUN_CONTAINER_AND_ATTACH_TO_SHELL_COMMAND=$(docker image ls --format={{.Repository}}:{{.Tag}} | \
  fzf-tmux -p --reverse --select-1 --exit-0 | \
  xargs -I{} echo docker run --rm -it --entrypoint=bash {}) \
  && eval $RUN_CONTAINER_AND_ATTACH_TO_SHELL_COMMAND

# system prune --all
docker system prune --all

# image prune --all
docker image prune --all

% dotfiles

# update dotfiles repository
cd ~/dotfiles && git pull && bin/symlink.sh && cd -

# update tools(macOS)
brew update && brew upgrade && brew cleanup

# update tools(Debian)
sudo apt-get update && sudo apt-get upgrade -y && \
sudo apt update && sudo apt-get upgrade -y && \
sudo apt-get autoremove -y

# check tool versions managed by asdf
delta <(asdf latest --all) <(asdf current)

% tmux

# launch or attach
tmux attach-session -t0 || tmux new-session

# restart t0 session
tmux kill-session -t0 && tmux new-session

% homebrew

# inspect dependency between formula
brew list | xargs -I{} sh -c 'brew uses --installed {} | wc -l | xargs printf "%20s is used by %2d formulae.\n" {}'

# print dependency by tree
brew deps --installed --tree

% tldr-pages
# print tldr pages from available commands
bash -c "compgen -c" | grep "^[a-z].*" | sort | uniq | fzf --reverse | xargs tldr

% navi
# open tldr-pages from available commands
bash -c "compgen -c" | grep "^[a-z].*" | sort | uniq | fzf --reverse | xargs navi --tldr

# open tldr-pages from input command
navi --tldr 

% kill process
lsof -P -i:<port_number> | fzf --exit-0 | awk "{print $2}" | xargs kill -9

% file/dir size
# human-readable, summarize
du -hs 

# human-readable
du -h 

% delta
# cool diff(input two files with fzh file search)
delta --line-numbers 

$ any_file_1: fd --no-ignore
$ any_file_2: fd --no-ignore

% comm
# print lines only in one file(with -13 or -23)
comm -3 <(cat <any_file_1> | sort) <(cat <any_file_2> | sort)
